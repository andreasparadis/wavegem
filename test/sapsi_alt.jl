# Load necessary modules
using Plots, LaTeXStrings, LinearAlgebra, DelimitedFiles
using FFTW, DSP, LsqFit

# Include necessary scripts for functions
include("signal_processing.jl")
include("peak_detect.jl")
include("runge_kutta.jl")
include("Gauss_Reg.jl")

g ::Float64 = 9.81
# Read signal from text file in library folder
fid::String = "rand_seas/JS1_H3_T8_eta-t.txt" # Path to file
cont = Array{Float64}(undef,0,2)

open("library/"*fid, "r")
cont = readdlm("library/"*fid, '\t', Float64, skipstart=1, '\n')

x = cont[:,1] # x-coordinates vector
Œ∑ = cont[:,2] # Surface elevation
M = length(x);      √ò·¥π = zeros(Float64,M) 

# Hilbert transform and envelope of surface elevation
ùìó = hilbert(Œ∑);   u = abs.(ùìó)

# Peak detection based on 2nd derivative of signal
x·∂ú·µ¢, A·µ¢, u‚Çì, u‚Çì‚Çì, i‚Å∫ = maxima(u, x)

dt = (x[end]-x[1])/(length(x)-1)
fcut = 2 # Cut-off frequency [Hz]
Tcut = 1/fcut
rng = Tcut/dt
len = length(x·∂ú·µ¢)
x·∂ú = [x·∂ú·µ¢[1]]
A = [A·µ¢[1]]

i = 1
while i < len
    if x·∂ú·µ¢[i+1]-x·∂ú·µ¢[i] < Tcut
        # push!(x·∂ú,(x·∂ú·µ¢[i-1]+x·∂ú·µ¢[i+1])/2)
        # push!(A,(A·µ¢[i-1]+A·µ¢[i+1])/2)
        global i += 2
    else
        push!(x·∂ú,x·∂ú·µ¢[i+1])
        push!(A,A·µ¢[i+1])
        global i += 1
    end
end

N = length(x·∂ú);     √ò·¥∫ = zeros(Float64,N)

# Gaussian Regression
# g, G, dGdL, If‚ÇÅ = (√ò·¥π[:] for _ = 1:4)

# Perform the least squares fitting
## Initial condition for L based on ‚àÇ‚Çì¬≤g(x·∂ú) = ‚àÇ‚Çì¬≤u(x·∂ú)
L = √ò·¥∫

for n ‚àà 1:N
    i = i‚Å∫[n]
    L[n] = sqrt.(-2*A[n]./u‚Çì‚Çì[i])
end

# Definition of the ODE's dL‚Çò  
œÑ = collect(range(0,1,M))
dx = (x[end]-x[1])/(M-1)

fun(œÑ,L) = dLdœÑ(œÑ,L)
L‚Çí‚Çö‚Çú = RK4_nln_sys(œÑ,L,fun)
G = gauss_fun(x, A, x·∂ú, L‚Çí‚Çö‚Çú[1])

# # Low-pass filter
# fcut = 5 # Cut-off frequency [Hz]
# Tcut = 1/fcut
# k_min = 0.5 * 2œÄ/x[end]
# T_max = 2œÄ / sqrt(g*k_min)
# L‚Çí = [0.0]
# x·∂ú‚Çí = [0.0]
# A‚Çí = [0.0]

# for i ‚àà 1:N
#     if L‚Çí‚Çö‚Çú[1][i] > Tcut && L‚Çí‚Çö‚Çú[1][i] < T_max
#         push!(L‚Çí, L‚Çí‚Çö‚Çú[1][i])
#         push!(x·∂ú‚Çí, x·∂ú[i])
#         push!(A‚Çí, A[i])
#     end
# end

# L‚Çí = L‚Çí[2:end]
# x·∂ú‚Çí = x·∂ú‚Çí[2:end]
# A‚Çí = A‚Çí[2:end]
# G = gauss_fun(x, A‚Çí, x·∂ú‚Çí, L‚Çí)

# # Group 1
# L1 = [ L‚Çí[18]; L[19] ]
# x1 = [x·∂ú‚Çí[18] x·∂ú‚Çí[19]]
# A1 = [ A‚Çí[18] A‚Çí[19] ]

# Œ∑‚Çú = zeros(Float64,M)
# for i ‚àà 1:2
#     for m ‚àà 1:M
#         Œ∑‚Çú[m] = Œ∑‚Çú[m] + A1[i] * cos(2œÄ/L1[i]*(x[m]-x1[i]))
#     end
# end

# Signal and envelope
lbl_x = L"x~[m]";   lbl_y = L"[m]";   llbls = [L"Œ∑(x)" L"u(x)"]
plt = plot(x, [Œ∑ u], xlab=lbl_x, ylab=lbl_y, lab=llbls, lw=[1 2])
display(plt)

# Scatter plot of extrema
plot(x, [u G], xlab = L"x~[m]", ylab = L"[m]", lab = [L"u(x)" L"G(x)"], lw=[2 1])
display(plot!(x·∂ú, A, seriestype=:scatter, ms=2, mc=:red, lab = "maxima"))